generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Restaurant {
  id           Int            @id @default(autoincrement())
  userId       String?        @map("user_id") @db.Uuid
  name         String
  abbreviation String         @unique
  features     Json           @default("{\"cartType\": \"canOrder\", \"isFilterBarEnabled\": true, \"enabledPaymentMethods\": [\"CARD\", \"CASH\"]}")
  colors       Json           @default("{\"primary\": \"#7eaa92\", \"secondary\": \"#caddc3\", \"accent\": \"#f7e987\", \"textColor\": \"#445069\"}")
  categories   DishCategory[]
  orders       Order[]
  logoUrl      String?        @map("logo_url")

  @@map("restaurant")
  @@schema("public")
}

model DishCategory {
  id           Int        @id @default(autoincrement())
  priority     Int        @default(0)
  name         Json
  picture      String?
  restaurantId Int        @map("restaurant_id")
  dishes       Dish[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("dish_category")
  @@schema("public")
}

model Todo {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  dueDate      DateTime
  completed    Boolean
  @@map("todo")
  @@schema("public")
}

model Dish {
  id            Int          @id @default(autoincrement())
  priority      Int          @default(0)
  name          Json
  price         Float
  picture       String?
  categoryId    Int          @map("category_id")
  ingredients   Json
  labels        Json?
  allergies     Json?
  nutritions    Json?
  dietType      DietType?
  description   Json?
  saleStartDate DateTime?    @map("sale_start_date")
  saleEndDate   DateTime?    @map("sale_end_date")
  salePrice     Float?       @map("sale_price")
  saleDays      Int[]        @map("sale_days")
  category      DishCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@map("dish")
  @@schema("public")
}

model Allergy {
  id        Int      @id @default(autoincrement())
  name      Json     @unique
  allergens String[]

  @@map("allergy")
  @@schema("public")
}

model Nutrition {
  id      Int    @id @default(autoincrement())
  dish    String @unique
  energy  Int
  protein Int

  @@map("nutrition")
  @@schema("public")
}

model Order {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  tableId       String        @map("table_id")
  positions     Json
  paymentMethod PaymentMethod @map("payment_method")
  isPayed       Boolean?      @map("is_payed")
  netTotal      Float         @map("net_total")
  vat           Float?
  note          String?
  restaurantId  Int           @map("restaurant_id")
  orderDate     DateTime?     @default(now()) @map("order_date") @db.Timestamp(6)
  orderStatus   OrderStatus   @default(RECEIVED) @map("order_status")
  retaurant     Restaurant    @relation(fields: [restaurantId], references: [id])

  @@map("order")
  @@schema("public")
}

enum DietType {
  VEGAN
  VEGETARIAN
  PESCATARIAN
  OMNIVORE

  @@map("dish_type")
  @@schema("public")
}

enum PaymentMethod {
  CARD
  CASH
  COUPON

  @@map("payment_method")
  @@schema("public")
}

enum OrderStatus {
  RECEIVED
  DONE
  REJECTED

  @@map("order_status")
  @@schema("public")
}
